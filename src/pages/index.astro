---
import { getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import ArrowCard from "@components/ArrowCard"
import StackCard from "@components/StackCard.astro"
import { SITE, SOCIALS } from "@consts"
import TwinklingStars from "@components/TwinklingStars.astro"
import MeteorShower from "@components/MeteorShower.astro"

const projects = (await getCollection("projects"))
  .filter(project => !project.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0,3)

const stack = [
  { 
    text: "Arduino", 
    icon: "arduino.png", 
    href: "https://www.arduino.cc",
    isActive: true
  },
  { 
    text: "C", 
    icon: "c-original.svg", 
    href: "https://www.w3schools.com/c/c_intro.php",
    isActive: true
  },
  { 
    text: "C++", 
    icon: "cplusplus-original.svg", 
    href: "https://www.w3schools.com/cpp/cpp_intro.asp",
    isActive: true
  },
  { 
    text: "Python", 
    icon: "python-original.svg",
    href: "https://www.python.org/about",
    isActive: true
  },
  { 
    text: "C#", 
    icon: "cSharp.svg", 
    href: "https://www.w3schools.com/cs/cs_intro.php",
    isActive: true
  },
  { 
    text: "Assembly", 
    icon: "asm.png", 
    href: "https://www.tutorialspoint.com/assembly_programming/assembly_introduction.htm",
    isActive: true
  },
  { 
    text: "Haskell", 
    icon: "haskell-original.svg", 
    href: "https://www.haskell.org",
    isActive: true
  },
  { 
    text: "R", 
    icon: "r.png", 
    href: "https://www.w3schools.com/r/r_intro.asp",
    isActive: true
  },
  { 
    text: "Swift", 
    icon: "swift-original.svg", 
    href: "https://developer.apple.com/swift",
    isActive: true
  },
  { 
    text: "SwiftUI", 
    icon: "swift-original.svg", 
    href: "https://developer.apple.com/xcode/swiftui",
    isActive: true
  },
  { 
    text: "React-Native", 
    icon: "react-original.svg", 
    href: "https://reactnative.dev",
    isActive: true
  },
  { 
    text: "Angular", 
    icon: "angular.png", 
    href: "https://angular.dev",
    isActive: true
  },
  { 
    text: "AngularJS", 
    icon: "angularjs-original.svg", 
    href: "https://www.w3schools.com/angular/angular_intro.asp",
    isActive: true
  },
  { 
    text: "VueJS", 
    icon: "vuejs-original.svg", 
    href: "https://vuejs.org",
    isActive: true
  },
  { 
    text: "ReactJS", 
    icon: "react-original.svg", 
    href: "https://react.dev",
    isActive: true
  },
  { 
    text: "Next.js", 
    icon: "nextjs.png", 
    href: "https://nextjs.org",
    isActive: true
  },
  {
    text: "Astro", 
    icon: "astro.png", 
    href: "https://astro.build",
    isActive: true
  },
  { 
    text: "NodeJS", 
    icon: "nodejs-original.svg", 
    href: "https://nodejs.org",
    isActive: true
  },
  { 
    text: "Vercel", 
    icon: "vercel.png", 
    href: "https://vercel.com/home",
    isActive: true
  },
  { 
    text: "AWS Cloud Formation", 
    icon: "aws.png", 
    href: "https://aws.amazon.com/cloudformation/",
    isActive: true
  },
  { 
    text: "SalesForce", 
    icon: "salesforce.png", 
    href: "https://www.salesforce.com",
    isActive: true
  },
  { 
    text: "LeadTrac",
    icon: "leadtrac.png", 
    href: "https://www.ndssite.com",
    isActive: true
  },
  { 
    text: "Xcode", 
    icon: "xcode-original.svg", 
    href: "https://developer.apple.com/xcode",
    isActive: true
  },
  { 
    text: "Docker", 
    icon: "docker-original.svg", 
    href: "https://www.docker.com",
    isActive: true
  },
  { 
    text: "Postman", 
    icon: "postman-original.svg", 
    href: "https://www.postman.com",
    isActive: true
  },
  { 
    text: "MongoDB", 
    icon: "mongodb-original.svg", 
    href: "https://www.mongodb.com",
    isActive: true
  },
  {
    text: "Alteryx", 
    icon: "alteryx.jpeg", 
    href: "https://www.alteryx.com",
    isActive: true
  },
  { 
    text: "Git", 
    icon: "git-original.svg", 
    href: "https://git-scm.com",
    isActive: true
  },
  { 
    text: "GitKraken", 
    icon: "gitkraken.jpeg", 
    href: "https://www.gitkraken.com",
    isActive: true
  },
  { 
    text: "Nifty", 
    icon: "nifty.png", 
    href: "https://niftypm.com/",
    isActive: true
  },
  { 
    text: "MacOS", 
    icon: "macOS.png", 
    href: "",
    isActive: false
  },
  { 
    text: "Linux", 
    icon: "linux-original.svg", 
    href: "",
    isActive: false
  },
]

const languages = [
  { 
    text: "English (fluent)", 
    icon: "united-states.png", 
    href: "",
    isActive: false
  },
  { 
    text: "French (native)", 
    icon: "france.png", 
    href: "",
    isActive: false
  }
]
---

<PageLayout title="Home" description={SITE.DESCRIPTION}>

  <!-- Light Mode: Particles -->
  <div class='absolute inset-0 block dark:hidden'>
    <div id='particles1' class='fixed inset-0'></div>
    <div id='particles2' class='fixed inset-0'></div>
    <div id='particles3' class='fixed inset-0'></div>
  </div>

  <!-- Dark Theme: Stars -->
  <div class='absolute inset-0 bg-black hidden dark:block'>
    <div id='stars1' class='fixed inset-0'></div>
    <div id='stars2' class='fixed inset-0'></div>
    <div id='stars3' class='fixed inset-0'></div>
  </div>

  <!-- Dark Theme: Twinkling Stars / Metors -->
  <div id="galaxy" class="fixed inset-0">
    <div class="hidden dark:block">
      <TwinklingStars/>
      <MeteorShower/>
    </div>
  </div>

  <script is:inline src="/js/bg.js"></script>
  
  <!-- HERO -->
  <section class="relative h-screen w-full">
    <div id="planetcont" class='animate absolute inset-0 top-1/4 overflow-hidden'>
      <div id="crescent" class='absolute top-0 left-1/2 -translate-x-1/2 w-[250vw] min-h-[100vh] aspect-square rounded-full p-[1px] bg-gradient-to-b from-black/25 dark:from-white/75 from-0% to-transparent to-5%'>
        <div id="planet" class='w-full h-full bg-white dark:bg-black rounded-full p-[1px] overflow-hidden flex justify-center'>
          <div id="blur" class='w-full h-20 rounded-full bg-neutral-900/25 dark:bg-white/25 blur-3xl'/>
        </div>
      </div>
    </div>
    <div class="animate absolute h-full w-full flex items-center justify-center">
      <div class='relative w-full h-full flex items-center justify-center'>
        <div class='p-5 text-center'>
          <p class='animated text-lg md:text-xl lg:text-2xl font-semibold opacity-75'>
            Hello, I am Maxence
          </p>
          <p class='animated text-2xl md:text-3xl lg:text-4xl font-bold uppercase text-black dark:text-white'>
            Software Engineer
          </p>
          <p class='animated text-sm md:text-base lg:text-lg opacity-75'>
            Master's Graduate in Computer Science & Programming | Actively Seeking Software Engineering Opportunities.
          </p>
          <div id="ctaButtons" class='animated flex flex-wrap gap-4 justify-center mt-5'>
            <a href='/resume/maxence_marques-pierre_resume.pdf' download class='py-2 px-4 rounded truncate text-xs md:text-sm lg:text-base bg-black dark:bg-white text-white dark:text-black hover:opacity-75 blend'>
              Download my resume
            </a>
            <a href='/work' class='py-2 px-4 truncate rounded text-xs md:text-sm lg:text-base border border-black/25 dark:border-white/25 hover:bg-black/5 hover:dark:bg-white/15 blend'>
              View my work experience
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <div class="relative bg-white dark:bg-black">
    <div class="mx-auto max-w-screen-sm p-5 space-y-24 pb-16">

      <!-- About Section -->
      <section class="animate">
        <article>
          <p>I am a <b>results-driven Software Engineer</b> and <b>Product Manager</b> with a <b>Master's degree</b> in <b>Computer Science</b> from Epitech (European Institute of Technology) in Paris, France, and <b>international experience</b> in both Europe and the U.S. After completing a year of study in <b>New York</b> specializing in <b>Fintech</b> and <b>leading a team</b> of 10 in my Epitech Innovative Project, I joined <b>Debt Consultants Group</b> in October 2024 as their <b>first and sole software engineer</b>.</p>

          <p>In this role, I have <b>independently imagined, designed, and built</b> six impactful <b>end-to-end solutions</b> from a fully integrated <b>onboarding portal</b> with <b>admin dashboards</b> (leveraging <b>Next.js, Node.js, AWS SAM, DynamoDB</b>, and <b>Salesforce integration</b>), to <b>AI-augmented web scrapers</b> and <b>automation tools</b> that have directly <b>generated leads</b>, <b>streamlined operations</b>, and <b>saved hundreds of work hours</b> across departments. I introduced <b>structured development processes</b> using <b>GitHub</b> and <b>best coding practices</b>, becoming a <b>central force</b> behind the companyâ€™s <b>digital transformation</b>.</p>

          <p>I thrive in <b>fast-paced environments</b> where I can blend <b>technical innovation</b> with <b>business strategy</b>, always focusing on <b>performance</b>, <b>automation</b>, and <b>growth</b>.</p>
        </article>
      </section>

      <!-- Tech Stack Section -->
      <section class="animate">
        <div class="space-y-4">
          <p class="font-semibold text-black dark:text-white">
            Skills
          </p>
          <div class="flex flex-wrap items-center gap-2 mt-5">
            {stack.map(item => (
              <StackCard 
                text={item.text}
                icon={item.icon}
                href={item.href}
                isActive={item.isActive}
              />
            ))}
          </div>
        </div>

        <div class="space-y-4 mt-5">
          <p class="font-semibold text-black dark:text-white">
            Languages
          </p>
          <div class="flex flex-wrap items-center gap-2 mt-5">
            {languages.map(item => (
              <StackCard 
                text={item.text}
                icon={item.icon}
                href={item.href}
                isActive={item.isActive}
              />
            ))}
          </div>
        </div>
      </section>

      <!-- Project Preview Section -->
      <section class="animate">
        <div class="space-y-4">
          <div class="flex justify-between">
            <p class="font-semibold text-black dark:text-white">
              Recent projects
            </p>
            <a href="/projects" class="w-fit col-span-3 group flex gap-1 items-center underline decoration-[.5px] decoration-black/25 dark:decoration-white/50 hover:decoration-black dark:hover:decoration-white text-black dark:text-white underline-offset-2 blend">
              <span class="text-black/75 dark:text-white/75 group-hover:text-black group-hover:dark:text-white blend">
                All projects
              </span>
            </a>
          </div>
          <ul class="space-y-4">
            {projects.map((project) => (
              <li>
                <ArrowCard entry={project} />
              </li>
            ))}
          </ul>
        </div>
      </section>

      <!-- Contact Section -->
      <section class="animate">
        <div>
          <p class="font-semibold text-black dark:text-white">
            Let's Connect
          </p>
          <p>
            Reach out to me via email or on social media.
          </p>
          <div class="grid grid-cols-4 gap-y-2 mt-4 auto-cols-min">
            {SOCIALS.map(social => (
              <div class="col-span-1 flex items-center gap-1">
                <span class="whitespace-nowrap truncate">
                  {social.NAME}
                </span>
              </div>
              <div class="col-span-3 truncate">
                <a href={social.HREF} target="_blank" class="w-fit col-span-3 group flex gap-1 items-center underline decoration-[.5px] decoration-black/25 dark:decoration-white/50 hover:decoration-black dark:hover:decoration-white text-black dark:text-white underline-offset-2 blend">
                  <span class="text-black/75 dark:text-white/75 group-hover:text-black group-hover:dark:text-white blend">
                    {social.TEXT}
                  </span>
                </a>
              </div>
            ))}
        </div>
      </section>
    </div>
  </div>

  <section class="animate relative w-full bg-transparent">
    <div class="mx-auto max-w-screen-xl">
      <div id="solar-system-container" class="w-full h-[800px] bg-transparent"></div>
    </div>
  </section>

  <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('solar-system-container');

      const scene = new THREE.Scene();
      scene.background = null;
      
      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
      camera.position.z = 40;
      camera.position.y = 15;
      camera.lookAt(0, 0, 0);
      
      const renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        alpha: true
      });
      renderer.setClearColor(0x000000, 0); // Fully transparent
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);
      
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      
      const sunLight = new THREE.PointLight(0xffffff, 1, 100);
      sunLight.position.set(0, 0, 0);
      scene.add(sunLight);
      
      const textureLoader = new THREE.TextureLoader();
      
      const sunGeometry = new THREE.SphereGeometry(3, 32, 32);
      const sunTexture = textureLoader.load(`textures/sun.jpg`);
      const sunMaterial = new THREE.MeshBasicMaterial({ map: sunTexture });
      const sun = new THREE.Mesh(sunGeometry, sunMaterial);
      scene.add(sun);

      const planets = [
        { name: 'Mercury', size: 0.4, distance: 6, texture: 'mercury.jpg', speed: 0.02, inclination: 7.0 },
        { name: 'Venus', size: 0.7, distance: 9, texture: 'venus.jpg', speed: 0.015, inclination: 3.4 },
        { name: 'Earth', size: 0.8, distance: 13, texture: 'earth.jpg', speed: 0.01, inclination: 0.0 },
        { name: 'Mars', size: 0.6, distance: 16, texture: 'mars.jpg', speed: 0.008, inclination: 1.9 },
        { name: 'Jupiter', size: 1.5, distance: 22, texture: 'jupiter.jpg', speed: 0.005, inclination: 1.3 },
        { name: 'Saturn', size: 1.2, distance: 28, texture: 'saturn.jpg', speed: 0.003, inclination: 2.5 }
      ];
      
      const planetMeshes = planets.map(planet => {
        const geometry = new THREE.SphereGeometry(planet.size, 32, 32);
        const texture = textureLoader.load(`textures/${planet.texture}`);
        const material = new THREE.MeshStandardMaterial({ map: texture });
        const mesh = new THREE.Mesh(geometry, material);
        const orbitGroup = new THREE.Group();
        orbitGroup.rotation.x = THREE.MathUtils.degToRad(planet.inclination);
        orbitGroup.add(mesh);
        
        mesh.position.x = planet.distance;
        
        scene.add(orbitGroup);
        
        if (planet.name === 'Earth') {
          const moonGeometry = new THREE.SphereGeometry(0.2, 32, 32);
          const moonTexture = textureLoader.load(`textures/moon.jpg`);
          const moonMaterial = new THREE.MeshStandardMaterial({ map: moonTexture });
          const moon = new THREE.Mesh(moonGeometry, moonMaterial);

          const moonOrbitGroup = new THREE.Group();
          moonOrbitGroup.add(moon);
          moon.position.x = 1.5;

          moonOrbitGroup.position.x = planet.distance;

          orbitGroup.add(moonOrbitGroup);

          return {
            mesh,
            orbitGroup,
            speed: planet.speed,
            moon,
            moonOrbitGroup,
            moonSpeed: 0.04
          };
        }
        
        return { mesh, orbitGroup, speed: planet.speed };
      });
      
      function animate() {
        requestAnimationFrame(animate);
        
        sun.rotation.y += 0.005;
        
        planetMeshes.forEach(planet => {
          if (planet.moonOrbitGroup) {
            planet.orbitGroup.rotation.y += planet.speed;
            planet.mesh.rotation.y += planet.speed * 0.5;
            
            // Moon orbit and rotation
            planet.moonOrbitGroup.rotation.y += planet.moonSpeed;
            planet.moon.rotation.y += planet.moonSpeed * 0.5;
          } else {
            // Regular planets
            planet.orbitGroup.rotation.y += planet.speed;
            planet.mesh.rotation.y += planet.speed * 0.5;
          }
        });
        
        renderer.render(scene, camera);
      }
      
      animate();
      
      window.addEventListener('resize', () => {
        const newWidth = container.clientWidth;
        const newHeight = container.clientHeight;
        
        camera.aspect = newWidth / newHeight;
        camera.updateProjectionMatrix();
        
        renderer.setSize(newWidth, newHeight);
      });
    });
  </script>
</PageLayout>
